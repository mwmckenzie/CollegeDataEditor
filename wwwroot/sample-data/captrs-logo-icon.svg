<svg xmlns="http://www.w3.org/2000/svg" version="1.1" id="Layer_1" x="0px" y="0px" width="100%" viewBox="0 0 248 248"
     enable-background="new 0 0 248 248" xml:space="preserve"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
    <path fill="#000000" opacity="1.000000" stroke="none"
          d=" M151.000000,249.000000   C100.666672,249.000000 50.833340,249.000000 1.000007,249.000000   C1.000005,166.333344 1.000005,83.666679 1.000002,1.000018   C83.666649,1.000012 166.333298,1.000012 248.999969,1.000006   C248.999969,83.666649 248.999969,166.333298 248.999985,248.999969   C216.500000,249.000000 184.000000,249.000000 151.000000,249.000000  M185.565323,51.961941   C176.438812,46.868511 167.349945,41.706161 158.176773,36.698200   C145.199936,29.613670 132.332001,22.298040 119.094101,15.733359   C108.558128,10.508572 97.008759,18.267653 97.001213,29.943392   C96.995209,39.246746 97.000000,48.550110 97.000000,57.977318   C95.757462,57.977318 94.892555,58.146656 94.119087,57.952240   C79.620247,54.307789 65.127579,50.638470 50.643715,46.934887   C41.708382,44.650093 35.009449,49.886620 35.006413,59.293549   C34.992046,103.789307 34.989136,148.285065 35.008194,192.780823   C35.012562,202.976532 41.683372,208.271866 51.470306,205.788406   C66.552315,201.961288 81.605705,198.021362 97.000000,194.044373   C97.000000,204.032837 96.963699,213.850555 97.037003,223.667465   C97.048737,225.238800 97.380409,226.860138 97.854103,228.367218   C101.124153,238.771011 114.377586,240.409088 122.477348,235.836975   C133.400162,229.671326 144.261810,223.394958 155.247314,217.343338   C172.555939,207.808472 189.885025,198.306915 207.328796,189.023010   C215.202133,184.832672 219.883133,179.299179 218.053787,169.812759   C217.681976,167.884644 217.806702,165.801376 218.032761,163.827454   C219.141068,154.149734 211.759872,150.264893 203.357925,152.335571   C191.200287,155.331848 179.177155,158.870117 167.038849,161.949310   C127.801895,171.902817 88.538536,181.752197 49.299263,191.638214   C49.299263,148.222580 49.299263,104.668945 49.299263,60.971275   C64.432213,64.709503 79.270386,68.290634 94.029694,72.171661   C95.288597,72.502701 96.816826,74.802933 96.867737,76.236404   C97.145561,84.059128 97.000000,91.896889 97.000000,99.729477   C97.000008,124.026817 97.000000,148.324158 97.000000,172.690643   C100.231728,171.877869 103.185860,170.624969 106.188141,170.496429   C110.989105,170.290833 111.064484,167.575775 111.056923,163.895691   C110.968201,120.733330 110.999977,77.570709 111.000107,34.408157   C111.000114,33.241608 110.915329,32.067219 111.020264,30.910110   C111.249222,28.385349 112.130051,27.311108 114.785683,28.928820   C117.934479,30.846939 121.306847,32.393795 124.538712,34.180439   C149.154068,47.788349 173.800049,61.341770 198.340210,75.084152   C205.209518,78.930939 204.676559,77.936729 203.293884,85.871986   C174.990723,78.597984 146.686203,71.323631 118.172020,63.995396   C118.172020,68.984879 118.172020,73.773750 118.172020,78.893036   C119.026497,78.935349 119.831734,78.842041 120.564339,79.030724   C148.415787,86.203781 176.265091,93.385376 204.103302,100.609657   C211.676834,102.575066 217.919586,97.988609 217.992661,90.244568   C218.033539,85.912025 217.972778,81.578583 218.007019,77.245926   C218.048050,72.051682 215.900299,68.440704 211.152908,65.942314   C202.760696,61.525795 194.588806,56.690689 185.565323,51.961941  z"/>
    <path fill="#FFFFFF" opacity="1.000000" stroke="none"
          d=" M185.945007,51.996361   C194.588806,56.690689 202.760696,61.525795 211.152908,65.942314   C215.900299,68.440704 218.048050,72.051682 218.007019,77.245926   C217.972778,81.578583 218.033539,85.912025 217.992661,90.244568   C217.919586,97.988609 211.676834,102.575066 204.103302,100.609657   C176.265091,93.385376 148.415787,86.203781 120.564339,79.030724   C119.831734,78.842041 119.026497,78.935349 118.172020,78.893036   C118.172020,73.773750 118.172020,68.984879 118.172020,63.995396   C146.686203,71.323631 174.990723,78.597984 203.293884,85.871986   C204.676559,77.936729 205.209518,78.930939 198.340210,75.084152   C173.800049,61.341770 149.154068,47.788349 124.538712,34.180439   C121.306847,32.393795 117.934479,30.846939 114.785683,28.928820   C112.130051,27.311108 111.249222,28.385349 111.020264,30.910110   C110.915329,32.067219 111.000114,33.241608 111.000107,34.408157   C110.999977,77.570709 110.968201,120.733330 111.056923,163.895691   C111.064484,167.575775 110.989105,170.290833 106.188141,170.496429   C103.185860,170.624969 100.231728,171.877869 97.000000,172.690643   C97.000000,148.324158 97.000008,124.026817 97.000000,99.729477   C97.000000,91.896889 97.145561,84.059128 96.867737,76.236404   C96.816826,74.802933 95.288597,72.502701 94.029694,72.171661   C79.270386,68.290634 64.432213,64.709503 49.299263,60.971275   C49.299263,104.668945 49.299263,148.222580 49.299263,191.638214   C88.538536,181.752197 127.801895,171.902817 167.038849,161.949310   C179.177155,158.870117 191.200287,155.331848 203.357925,152.335571   C211.759872,150.264893 219.141068,154.149734 218.032761,163.827454   C217.806702,165.801376 217.681976,167.884644 218.053787,169.812759   C219.883133,179.299179 215.202133,184.832672 207.328796,189.023010   C189.885025,198.306915 172.555939,207.808472 155.247314,217.343338   C144.261810,223.394958 133.400162,229.671326 122.477348,235.836975   C114.377586,240.409088 101.124153,238.771011 97.854103,228.367218   C97.380409,226.860138 97.048737,225.238800 97.037003,223.667465   C96.963699,213.850555 97.000000,204.032837 97.000000,194.044373   C81.605705,198.021362 66.552315,201.961288 51.470306,205.788406   C41.683372,208.271866 35.012562,202.976532 35.008194,192.780823   C34.989136,148.285065 34.992046,103.789307 35.006413,59.293549   C35.009449,49.886620 41.708382,44.650093 50.643715,46.934887   C65.127579,50.638470 79.620247,54.307789 94.119087,57.952240   C94.892555,58.146656 95.757462,57.977318 97.000000,57.977318   C97.000000,48.550110 96.995209,39.246746 97.001213,29.943392   C97.008759,18.267653 108.558128,10.508572 119.094101,15.733359   C132.332001,22.298040 145.199936,29.613670 158.176773,36.698200   C167.349945,41.706161 176.438812,46.868511 185.945007,51.996361  M180.282028,172.962509   C174.829605,174.308487 169.369690,175.624893 163.926163,177.005936   C146.270248,181.485168 128.620361,185.988113 111.158386,190.433517   C111.158386,201.808289 111.158386,212.765640 111.158386,225.491318   C142.632095,208.142487 173.251328,191.264664 203.725586,174.466736   C203.725586,171.931839 203.725586,169.507202 203.725586,166.825256   C195.937759,168.769867 188.468994,170.634796 180.282028,172.962509  z"/>
    <path fill="#000000" opacity="1.000000" stroke="none"
          d=" M180.641129,172.731110   C188.468994,170.634796 195.937759,168.769867 203.725586,166.825256   C203.725586,169.507202 203.725586,171.931839 203.725586,174.466736   C173.251328,191.264664 142.632095,208.142487 111.158386,225.491318   C111.158386,212.765640 111.158386,201.808289 111.158386,190.433517   C128.620361,185.988113 146.270248,181.485168 163.926163,177.005936   C169.369690,175.624893 174.829605,174.308487 180.641129,172.731110  z"/>
</svg>