@using CollegeDataEditor.Services
@using CollegeDataEditor.Models
@using CollegeDataEditor.Enums
@using CollegeDataEditor.ViewModels
@using Microsoft.AspNetCore.Components

@inject DbService _dbService
@inject ISnackbar _snackbar
@inject IDialogService _dialogService

<PageTitle>College Prep DB - @listName Database</PageTitle>
<MudText Class="pa-4 ma-4" Typo="Typo.h3">@listName Database</MudText>

@if (ViewModel.db.state == DbState.Loading)
{
    <MudText Class="pa-4 ma-4" Typo="Typo.h3">LOADING @listName DATABASE</MudText>
    <MudProgressLinear Color="Color.Secondary" Indeterminate="true"/>
}
else
{
    @if (_indexedValues is not null && _indexedValues.Count > 0)
    {
        <MudTable Items="@_indexedValues" Dense="@ViewModel.dense" 
                  Hover="@ViewModel.hover" ReadOnly="@ViewModel.ronly" 
                  CanCancelEdit="@ViewModel.canCancelEdit" 
                  Filter="new Func<IndexedValue,bool>(FilterFunc)"
                  @bind-SelectedItem="@ViewModel.editItem" 
                  SortLabel="Sort By" 
                  CommitEditTooltip="Commit Edit"
                  OnCommitEditClick="@(() => _snackbar.Add("Commit Edit Handler Invoked"))" 
                  RowEditPreview="BackupItem" 
                  RowEditCancel="ResetItemToOriginalValues"
                  RowEditCommit="ItemHasBeenCommitted" 
                  IsEditRowSwitchingBlocked="@ViewModel.blockSwitch" 
                  ApplyButtonPosition="@applyButtonPosition" 
                  EditButtonPosition="@editButtonPosition" 
                  EditTrigger="@editTrigger"
                  @bind-RowsPerPage="@ViewModel.rowsPerPage"
                  ServerData="new Func<TableState, Task<TableData<IndexedValue>>>(RefreshTable)"
                  @ref="table">
            <ToolBarContent>
                <MudText Typo="Typo.h6">
                    @listName
                </MudText>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(OnSearch)" Placeholder="Search" Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                @* <MudTextField @bind-Value="searchString"  *@
                @*               Placeholder="Search"  *@
                @*               Adornment="Adornment.Start"  *@
                @*               AdornmentIcon="@Icons.Material.Filled.Search"  *@
                @*               IconSize="Size.Medium" Class="mt-0"/> *@
            </ToolBarContent>
            <ColGroup>
                @if (applyButtonPosition.DisplayApplyButtonAtStart() 
                     || (editButtonPosition.DisplayEditButtonAtStart() 
                         && editTrigger == TableEditTrigger.EditButton))
                {
                    <col style="width:50px;" />
                }
                <col style="width:50px;" />
                <col style="width:50px;" />
                <col style="width:50%;" />
                <col />
                <col />
                @if (applyButtonPosition.DisplayApplyButtonAtEnd() 
                     || (editButtonPosition.DisplayEditButtonAtEnd() 
                         && editTrigger == TableEditTrigger.EditButton))
                {
                    <col style="width:50px;" />
                }
            </ColGroup>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<IndexedValue, object>(x => x.typeName)">
                        Label
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<IndexedValue, object>(x => x.valueType)">
                        Type
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                                       SortBy="new Func<IndexedValue, object>(x => x.value)">
                        Tag
                    </MudTableSortLabel>
                </MudTh>
                
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Label">@context.typeName</MudTd>
                <MudTd DataLabel="Type">@context.valueType</MudTd>
                <MudTd DataLabel="Tag">@context.value</MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="Label">@context.typeName</MudTd>
                <MudTd DataLabel="Type">@context.valueType</MudTd>
                <MudTd DataLabel="Tag">
                    <MudTextField @bind-Value="@context.value" Required />
                </MudTd>
                <MudTd>
                    <MudButton StartIcon="@Icons.Material.Filled.Delete" 
                               OnClick="DeleteSelected"/>
                </MudTd>
            </RowEditingTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
            <EditButtonContent Context="button">
                <MudIconButton Size="@Size.Small" 
                               Icon="@Icons.Outlined.Edit" 
                               Class="pa-0" 
                               OnClick="@button.ButtonAction" 
                               Disabled="@button.ButtonDisabled" />
            </EditButtonContent>
        </MudTable>
        
        <MudSwitch @bind-Checked="@ViewModel.hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Checked="@ViewModel.dense" Color="Color.Secondary">Dense</MudSwitch>
        <MudSwitch @bind-Checked="@ViewModel.ronly" Color="Color.Tertiary">Read Only</MudSwitch>
        <MudSwitch @bind-Checked="@ViewModel.canCancelEdit" Color="Color.Info">Can Cancel Edit</MudSwitch>
        <MudSwitch @bind-Checked="@ViewModel.blockSwitch" Color="Color.Success">Block Edit Row Switching</MudSwitch>

        <MudGrid>
            <MudItem xs="12" md="4">
                <MudSelect Label="Edit Trigger" T="TableEditTrigger" @bind-Value="editTrigger">
                    <MudSelectItem Value="TableEditTrigger.RowClick">Row Click</MudSelectItem>
                    <MudSelectItem Value="TableEditTrigger.EditButton">Edit Button</MudSelectItem>
                </MudSelect>
            </MudItem>
            @if (editTrigger == TableEditTrigger.EditButton)
            {
                <MudItem xs="12" md="4">
                    <MudSelect Label="Edit Button Postion" T="TableEditButtonPosition" @bind-Value="editButtonPosition">
                        <MudSelectItem Value="TableEditButtonPosition.Start">Start</MudSelectItem>
                        <MudSelectItem Value="TableEditButtonPosition.End">End</MudSelectItem>
                        <MudSelectItem Value="TableEditButtonPosition.StartAndEnd">Start and End</MudSelectItem>
                    </MudSelect>
                </MudItem>
            }
            <MudItem xs="12" md="4">
                <MudSelect Label="Apply Button Postion" T="TableApplyButtonPosition" @bind-Value="applyButtonPosition">
                    <MudSelectItem Value="TableApplyButtonPosition.Start">Start</MudSelectItem>
                    <MudSelectItem Value="TableApplyButtonPosition.End">End</MudSelectItem>
                    <MudSelectItem Value="TableApplyButtonPosition.StartAndEnd">Start and End</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>

        if (ViewModel.editItem?.value is not null)
        {
            <MudText Inline="true">Selected1: @ViewModel.editItem.value</MudText>
        }
        

        <MudExpansionPanels Style="flex: 1;">
            <MudExpansionPanel Text="Show inline-edit event log">
                @foreach (var message in editEvents)
                {
                    <MudText>@message</MudText>
                }
                @if (editEvents.Count > 0)
                {
                    <div class="d-flex">
                        <MudSpacer />
                        <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="ClearEventLog">Clear event log</MudButton>
                    </div>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>
        
        }
    else if (_indexedValues is not null && _indexedValues.Count > 0)
    {
        <MudText Class="pa-4 ma-4" Typo="Typo.h3">Pathogen Database Empty</MudText>
    }
    else
    {
        <MudText Class="pa-4 ma-4" Typo="Typo.h3">Pathogen Database Not Found</MudText>
    }
}

@code {

    [Parameter]
    public string listName { get; set; } = "Unknown";

    [Parameter]
    public IndexedValueDbViewModel ViewModel { get; set; }
    
    private List<string> editEvents = new();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;
    private MudTable<IndexedValue> table;
    
    private List<IndexedValue>? _indexedValues;
    private string _editRowStyle = "none";
    private string? _newItemName;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _indexedValues = ViewModel.db.dbItems;
    }
    
    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object indVal)
    {
        ViewModel.db.editingItem = (IndexedValue)indVal;
        
        ViewModel.indexedValueBeforeEdit = new()
        {
            value = ((IndexedValue)indVal).value,
            typeName = ((IndexedValue)indVal).typeName,
            valueType = ((IndexedValue)indVal).valueType,
            id = ((IndexedValue)indVal).id
        };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((IndexedValue)indVal).value}");
    }

    private async void ItemHasBeenCommitted(object indVal)
    {
        await ViewModel.db.SubmitToDbAsync();
        AddEditionEvent($"RowEditCommit event: Changes to Element {((IndexedValue)indVal).value} committed");
    }

    private void ResetItemToOriginalValues(object indVal)
    {
        ((IndexedValue)indVal).value = ViewModel.indexedValueBeforeEdit.value;
        ((IndexedValue)indVal).typeName = ViewModel.indexedValueBeforeEdit.typeName;
        ((IndexedValue)indVal).valueType = ViewModel.indexedValueBeforeEdit.valueType;
        ((IndexedValue)indVal).id = ViewModel.indexedValueBeforeEdit.id;
        AddEditionEvent($"RowEditCancel event: Editing of Element {((IndexedValue)indVal).value} cancelled");
    }

    private bool FilterFunc(IndexedValue indVal)
    {
        if (string.IsNullOrWhiteSpace(ViewModel.searchString) || indVal?.value is null)
            return true;
        return indVal.value.Contains(ViewModel.searchString, StringComparison.OrdinalIgnoreCase);
    }


    private async void DeleteSelected()
    {
        var result = await DeleteItem();
        
        if (result.Cancelled)
        {
            return;
        }
        _snackbar.Add($"Attempting to Delete: {ViewModel.editItem.value}");

        await ViewModel.RemoveIdFromAllAsync(ViewModel.editItem.id);
        
        //await RemoveIdFromAllAsync(ViewModel.dbViewModel.db.editingItem.id);

        if (await ViewModel.db.DeleteFromDbAsync())
        {
            _snackbar.Add($"Deleted: {ViewModel.db.editingItem.value}");
            await table.ReloadServerData();
            return;
        }
        _snackbar.Add($"Failed to Delete: {ViewModel.db.editingItem.value}");
    }

    private async Task<DialogResult> DeleteItem()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to delete {ViewModel.editItem.typeName} {ViewModel.editItem.value}? This process will remove the {ViewModel.editItem.typeName} from all database references.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        return await _dialogService.Show<DeleteConfimationDialog>("Delete", parameters, options).Result;
    }

    private async Task<TableData<IndexedValue>> RefreshTable(TableState state)
    {
        await ViewModel.db.GetAllFromDb();
        _indexedValues = ViewModel.db.dbItems.Where(obj =>
        {
            if (string.IsNullOrWhiteSpace(ViewModel.searchString) || obj.value is null)
                return true;
            if (obj.value.Contains(ViewModel.searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToList();
        var totalItems = _indexedValues.Count();
        _indexedValues = _indexedValues.OrderByDirection(state.SortDirection, o => o.value).ToList();

        var pagedData = _indexedValues.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<IndexedValue>() {TotalItems = _indexedValues.Count, Items = pagedData};
    }
    
    private void OnSearch(string text)
    {
        ViewModel.searchString = text;
        table.ReloadServerData();
    }

}