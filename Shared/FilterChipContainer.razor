
@using CollegeDataEditor.Services
@using CollegeDataEditor.Enums
@using CollegeDataEditor.Models
@using CollegeDataEditor.ViewModels

@* @inject DataStateService _dataStateService *@
@inject ViewModelService _viewModelService
@inject DbService _dbService


<MudPaper Style="padding: 15px"  >
    
    @* @if (!string.IsNullOrWhiteSpace(selectedDisplayText)) { *@
    @*     <div class="d-flex flex-column align-center"> *@
    @*         <MudText> *@
    @*             You have selected <MudText Color="@selected.Color" Inline="true">@selectedDisplayText</MudText>. *@
    @*         </MudText> *@
    @*     </div> *@
    @* } *@
    
    <MudChipSet @bind-SelectedChip="@selected" Filter="true"
                Mandatory="@mandatory"
                Class="d-flex flex-wrap justify-center flex-grow-1 gap-0">
        
        @* @foreach (var filter in _filters) { *@
        @*     <MudChip Value="" Text="@filter" Color="Color.Primary" *@
        @*              OnClick="@(e => _programBrowserVM.selectedFilter = filter)"> *@
        @*         @filter *@
        @*     </MudChip> *@
        @* } *@
        
        @* Note: Saved From Old Chip Filtering *@
        @* OnClick="@(e => _programBrowserVM.selectedFilterObj = filter)"> *@
        
        @foreach (var filter in _filterObjs)
        {
            <MudChip 
                     Value="filter" Text="@filter.value" 
                     Color="Color.Primary"
                     OnClick="@(e => SetFilteredObj(filter))">
                @filter.value
            </MudChip>
        }
    </MudChipSet>
    
</MudPaper>


@code {
    
    [Parameter]
    public string str { get; set; } = "on";

    [Parameter] 
    public FilterType filterType { get; set; }
    
    [Parameter]
    public bool showSelected { get; set; }

    [Parameter]
    public ProgramBrowserViewModel _programBrowserVM { get; set; }
    
    //private List<string> _filters = new();
    private List<IndexedValue> _filterObjs = new();

    private bool mandatory = true;
    private MudChip selected;

    // private void SetSelectedText()
    // {
    //     selectedDisplayText = string.Empty;
    //
    //     switch (filterType) {
    //         case FilterType.Subject:
    //             selectedDisplayText = _programBrowserVM.selectedSubjFilter.value ?? string.Empty;
    //             break;
    //         case FilterType.Topic:
    //             selectedDisplayText = _programBrowserVM.selectedTopicFilter.value ?? string.Empty;
    //             break;
    //         case FilterType.ProgramType:
    //             selectedDisplayText = _programBrowserVM.selectedProgramTypeFilter.value ?? string.Empty;
    //             break;
    //         case FilterType.Tag:
    //             selectedDisplayText = _programBrowserVM.selectedTagFilter.value ?? string.Empty;
    //             break;
    //         case FilterType.Org:
    //             break;
    //         case FilterType.State:
    //             break;
    //         case FilterType.Residence:
    //             break;
    //         case FilterType.Citizenship:
    //             break;
    //         default:
    //             break;
    //     }
    // }

    protected override async Task OnInitializedAsync() {
        _programBrowserVM ??= _viewModelService.ProgramBrowserVM;
        
        await base.OnInitializedAsync();
        await LoadFilterListAsync();
    }

    private List<IndexedValue> SortAscending(List<IndexedValue> list)
    {
        return list.OrderBy(x => x.value).ToList();
    }

    private async Task LoadFilterListAsync() {
        switch (filterType) {
            case FilterType.Subject:
                //_filters = _dbService.SubjectsDb.dbItems.Select(x => x.value).ToList();
                _filterObjs = _dbService.SubjectsDb.dbItems;
                _filterObjs = SortAscending(_filterObjs);
                break;
            case FilterType.Topic:
                //_filters = _dbService.TopicsDb.dbItems.Select(x => x.value).ToList();
                _filterObjs = _dbService.TopicsDb.dbItems;
                _filterObjs = SortAscending(_filterObjs);
                break;
            case FilterType.ProgramType:
                //_filters = _dbService.OrgTypesDb.dbItems.Select(x => x.value).ToList();
                _filterObjs = _dbService.ProgramTypesDb.dbItems;
                _filterObjs = SortAscending(_filterObjs);
                break;
            case FilterType.Tag:
                //_filters = _dbService.TagDb.dbItems.Select(x => x.value).ToList();
                _filterObjs = _dbService.TagDb.dbItems;
                _filterObjs = SortAscending(_filterObjs);
                break;
            case FilterType.Org:
                break;
            case FilterType.State:
                break;
            case FilterType.Residence:
                break;
            case FilterType.Citizenship:
                break;
            default:
                break;
        }
    }
    
    
    private void SetFilteredObj(IndexedValue selectedObj)
    {
        switch (filterType) {
            case FilterType.Subject:
                _programBrowserVM.selectedSubjFilter = selectedObj;
                break;
            case FilterType.Topic:
                _programBrowserVM.selectedTopicFilter = selectedObj;
                break;
            case FilterType.ProgramType:
                _programBrowserVM.selectedProgramTypeFilter = selectedObj;
                break;
            case FilterType.Tag:
                _programBrowserVM.selectedTagFilter = selectedObj;
                break;
            case FilterType.Org:
                break;
            case FilterType.State:
                break;
            case FilterType.Residence:
                break;
            case FilterType.Citizenship:
                break;
            default:
                break;
        }
        
    }

}