@using CollegeDataEditor.Services
@using CollegeDataEditor.Models
@using CollegeDataEditor.Interfaces

<MudText Class="pa-4" Typo="Typo.h6" GutterBottom="true">
    @listName List [@formList.Count]
</MudText>
        @foreach (var text in formList)
        {
            <MudListItem Icon="@itemIcons">
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudText>@text</MudText>
                    <MudButton Color="Color.Secondary" OnClick="() => DeleteFromList(text)">
                        Delete
                    </MudButton>
                </MudStack>
                @* <MudText Class="ml-auto">$12</MudText> *@
                @* Class="ml-auto" Style="height: 32px; width: 96px" *@
            </MudListItem>
        }
        <MudListItem Icon="@itemIcons">
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudTextField @bind-Value="@newListItem"
                              Label="@listName" Variant="Variant.Text"
                              Class="mr-2"/>
                <MudButton Color="Color.Tertiary" OnClick="AddListItem">
                    Add
                </MudButton>
                @* <MudText Class="ml-auto">$12</MudText> *@
            </MudStack>
        </MudListItem>

@code {
    
    [Parameter]
    public IDbContext dbContext { get; set; }
    
    [Parameter]
    public List<string> formList { get; set; }
    
    [Parameter]
    public EventCallback<List<string>> formListChanged { get; set; }

    [Parameter]
    public string itemIcons { get; set; } = Icons.Material.Filled.NotificationImportant;
    
    [Parameter]
    public string listName { get; set; }
    
    [Parameter]
    public string newListItem { get; set; }

    private void AddListItem()
    {
        if (formList.Contains(newListItem))
        {
            return;
        }
        formList.Add(newListItem);
        newListItem = string.Empty;
        
        dbContext.SubmitEditsToDbAsync();
    }
    
    private void DeleteFromList(string toDelete)
    {
        if (formList.Remove(toDelete))
        {
            StateHasChanged();
            dbContext.SubmitEditsToDbAsync();
        }
    }

}