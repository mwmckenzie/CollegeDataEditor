@page "/ProgramView"
@using CollegeDataEditor.Services
@using CollegeDataEditor.ViewModels
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@inject ViewModelService _viewModelService
@inject NavigationManager _navigationManager
@inject DbService _dbService
@inject ISnackbar _snackbar
@inject LookupService _lookupService
@inject IDialogService _dialogService


<MudGrid Class="mt-16">
    @if (_programViewModel.SummerProgram is null)
    {
        <MudItem xs="12">
            <div class="d-flex flex-column align-center">
                <MudPaper Class="pa-4 ma-2 d-flex">
                    <MudText Class="my-4" Typo="Typo.h4" Color="Color.Primary">
                        No Program Selected
                    </MudText>
                </MudPaper>
                <MudPaper Class="pa-4 ma-2">
                    <MudStack Row="true">
                        <MudText Typo="Typo.h4" Color="Color.Primary">Browse All Programs</MudText>
                        <MudSpacer/>
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Tertiary" 
                                   OnClick="NavigateToProgramBrowser">
                            Browse
                        </MudButton>
                    </MudStack>
                </MudPaper>
            </div>
        </MudItem>
    }
    else
    {
        <MudItem md="10" xs="12">
            <ProgramDetails SummerProgram="_programViewModel.SummerProgram"
                            IsSideView="false"
                            OnDeleteClickCallback="ArchiveSelected"/>
        </MudItem>
    }
</MudGrid>


<MudFab Style="position: fixed; bottom: 16px; right: 80px;"
        StartIcon="@Icons.Material.Filled.ArrowBack"
        Color="Color.Secondary"
        OnClick="NavigateToProgramBrowser"/>


@code {

    private ProgramViewModel _programViewModel;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _programViewModel = _viewModelService.ProgramVM;
        _programViewModel.dbService = _dbService;
    }

    private void NavigateToProgramBrowser()
    {
        _navigationManager.NavigateTo("ProgramBrowser");
    }
    
    private async void ArchiveSelected()
    {
        var result = await ArchiveItem();
        
        if (result.Cancelled)
        {
            return;
        }
        _snackbar.Add($"Attempting to Archive: {_programViewModel.SummerProgram.displayName}");
        
        if (await _programViewModel.DeleteSelectedProgram())
        {
            _snackbar.Add($"Deleted: {_programViewModel.SummerProgram.displayName}");
            _programViewModel.SummerProgram = new();
            _viewModelService.ProgramBrowserVM.ReloadProgramsFromDb();
            _navigationManager.NavigateTo("ProgramBrowser");
            return;
        }
        _snackbar.Add($"Failed to Archive: {_programViewModel.SummerProgram.displayName}");
    }

    private async Task<DialogResult> ArchiveItem()
    {
        var parameters = new DialogParameters();

        parameters.Add("ContentText", $"Do you really want to archive {_programViewModel.SummerProgram.TypeName()} {_programViewModel.SummerProgram.displayName}? This process is permanent.");
        parameters.Add("ButtonText", "Archive");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        return await _dialogService.Show<DeleteConfimationDialog>("Archive", parameters, options).Result;
    }

}