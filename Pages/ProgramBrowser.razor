@page "/programbrowser"

@using CollegeDataEditor.Models
@using CollegeDataEditor.Services
@using CollegeDataEditor.ViewModels
@using Microsoft.AspNetCore.Authorization
@using CollegeDataEditor.Enums

@attribute [Authorize]

@implements IDisposable

@inject DbService _dbService
@inject LookupService _lookupService
@inject ViewModelService _viewModelService
@inject ISnackbar _snackbar
@inject IDialogService _dialogService


<PageTitle>Summer Program DB</PageTitle>

<MudText Typo="Typo.h3" Class="mt-4 mb-4">Summer Program Database</MudText>

<MudPaper Style="padding: 15px; margin-top: 10px; margin-bottom: 10px;">
    <MudStack Row="true" Justify="Justify.SpaceBetween">
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h5">Programs in Database:</MudText>
            <MudChip Color="Color.Primary">@_programBrowserVM.programCount</MudChip>
        </MudStack>
        <MudSpacer/>
        <MudTextField @bind-Value="@_programBrowserVM.searchString1"
                      Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium" Class="mt-0"
                      Clearable="true"
                      OnClearButtonClick="OnClearTextSearchField">
        </MudTextField>
    </MudStack>
    
</MudPaper>

<MudGrid>
    <MudItem xs="7">
        
        @if (_programBrowserVM.hasActiveFilter)
        {
            <MudPaper Class="mb-2 pa-4">
                <MudStack Spacing="2">
                    @if (_programBrowserVM.hasSubjFilter)
                    {
                        <MudText Typo="Typo.h6"
                                 Color="Color.Tertiary">
                            <MudText Color="Color.Primary" Inline="true">
                                Subject:
                            </MudText>
                            @_programBrowserVM.selectedSubjFilter.value
                        </MudText>
                    }
                    @if (_programBrowserVM.hasTopicFilter)
                    {
                        <MudText Typo="Typo.h6"
                                 Color="Color.Tertiary">
                            <MudText Color="Color.Primary" Inline="true">
                                Topic:
                            </MudText>
                            @_programBrowserVM.selectedTopicFilter.value
                        </MudText>
                    }
                    @if (_programBrowserVM.hasTagFilter)
                    {
                        <MudText Typo="Typo.h6"
                                 Color="Color.Tertiary">
                            <MudText Color="Color.Primary" Inline="true">
                                Tag:
                            </MudText>
                            @_programBrowserVM.selectedTagFilter.value
                        </MudText>
                    }
                    @if (_programBrowserVM.hasProgTypeFilter)
                    {
                        <MudText Typo="Typo.h6"
                                 Color="Color.Tertiary">
                            <MudText Color="Color.Primary" Inline="true">
                                Program:
                            </MudText>
                            @_programBrowserVM.selectedProgramTypeFilter.value
                        </MudText>
                    }
                </MudStack>
            </MudPaper>
        }
        
        <MudTable Items="@_programBrowserVM.programsToDisplay"
                  Dense="@_programBrowserVM.dense"
                  Hover="@_programBrowserVM.hover"
                  Bordered="@_programBrowserVM.bordered"
                  Striped="@_programBrowserVM.striped"
                  @bind-RowsPerPage="@_programBrowserVM.rowsPerPage"
                  Filter="new Func<SummerProgram, bool>(FilterFunc1)"
                  @bind-SelectedItem="@_programBrowserVM.selected">
            @* <ToolBarContent> *@
            @*     $1$ <MudSpacer/> #1# *@
            @*     $1$ <MudTextField @bind-Value="@_programBrowserVM.searchString1"  #1# *@
            @*     $1$               Placeholder="Search" Adornment="Adornment.Start" #1# *@
            @*     $1$               AdornmentIcon="@Icons.Material.Filled.Search"  #1# *@
            @*     $1$               IconSize="Size.Medium" Class="mt-0"> #1# *@
            @*     $1$ </MudTextField> #1# *@
            @* </ToolBarContent> *@
            <HeaderContent>
                <MudTh>
                    <MudText Color="Color.Primary">Program Name</MudText>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.displayName</MudTd>
                <MudTd>
                    <MudButton OnClick="() => OnRowClicked(context)"
                               Color="Color.Primary">
                        Show
                    </MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
        </MudTable>
    </MudItem>
    
    
    <MudItem xs="5">
            <MudPaper Elevation="2" Style="margin-bottom: 10px;">
                
                <MudStack Row="true" Justify="Justify.SpaceEvenly" Class="py-4">
                    <MudText Typo="Typo.h5">Filter</MudText>
                    <MudButton Color="Color.Secondary" OnClick="OnClearFilterClicked">
                        Clear
                    </MudButton>
                </MudStack>
    
                <MudTabs Rounded="true"
                         ApplyEffectsToContainer="true"
                         PanelClass="pa-2"
                         @bind-ActivePanelIndex="@_programBrowserVM.activeTab">
    
                    <MudTabPanel Text="Subject">
                        <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="4" Class="px-6 py-4">
                            <MudText Typo="Typo.h6">Enabled</MudText>
                            <MudSwitch @bind-Checked="_programBrowserVM.filterBySubject"
                                       Color="Color.Tertiary"/>
                        </MudStack>
                        <FilterChipContainer _programBrowserVM="@_programBrowserVM"
                                             filterType="FilterType.Subject"/>
                        @* <ProgramFilterBar/> *@
                    </MudTabPanel>
    
                    <MudTabPanel Text="Topic">
                        <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="4" Class="px-6 py-4">
                            <MudText Typo="Typo.h6">Enabled</MudText>
                            <MudSwitch @bind-Checked="_programBrowserVM.filterByTopic"
                                       Color="Color.Tertiary"/>
                        </MudStack>
                        <FilterChipContainer _programBrowserVM="@_programBrowserVM"
                                             filterType="FilterType.Topic"/>
                        @* <ProgramFilterBar/> *@
                    </MudTabPanel>
    
                    <MudTabPanel Text="Tag">
                        <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="4" Class="px-6 py-4">
                            <MudText Typo="Typo.h6">Enabled</MudText>
                            <MudSwitch @bind-Checked="_programBrowserVM.filterByTag"
                                       Color="Color.Tertiary"/>
                        </MudStack>
                        <FilterChipContainer _programBrowserVM="@_programBrowserVM"
                                             filterType="FilterType.Tag"/>
                        @* <ProgramFilterBar/> *@
                    </MudTabPanel>
    
                    <MudTabPanel Text="Program Type">
                        <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="4" Class="px-6 py-4">
                            <MudText Typo="Typo.h6">Enabled</MudText>
                            <MudSwitch @bind-Checked="_programBrowserVM.filterByProgramType"
                                       Color="Color.Tertiary"/>
                        </MudStack>
                        <FilterChipContainer _programBrowserVM="@_programBrowserVM"
                                             filterType="FilterType.ProgramType"/>
                        @* <ProgramFilterBar/> *@
                    </MudTabPanel>
    
                    <MudTabPanel Text="Dates">
                        <MudStack Spacing="8" Class="pa-4">
                            <MudDivider DividerType="DividerType.FullWidth"/>
                            <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="4">
                                <MudText Typo="Typo.h6">Date Range Search</MudText>
                                <MudSwitch @bind-Checked="_programBrowserVM.filterByDate"
                                           Color="Color.Tertiary"/>
                            </MudStack>
                            <MudDateRangePicker Label="Search Dates"
                                                @bind-DateRange="_programBrowserVM.dateRange"/>
                            <MudDivider DividerType="DividerType.FullWidth"/>
    
                            <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="4">
                                <MudText Typo="Typo.h6">Expired Alarms</MudText>
                                <MudSwitch @bind-Checked="_programBrowserVM.filterByAlarm"
                                           Color="Color.Tertiary"/>
                            </MudStack>
    
                            <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="4">
                                <MudText Typo="Typo.h6">Active Applications</MudText>
                                <MudSwitch @bind-Checked="_programBrowserVM.filterByActiveApps"
                                           Color="Color.Tertiary"/>
                            </MudStack>
                            <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="4">
                                <MudText Typo="Typo.h6">2023 Programs</MudText>
                                <MudSwitch @bind-Checked="_programBrowserVM.filterByHasFutureDates"
                                           Color="Color.Tertiary"/>
                            </MudStack>
    
                            <MudStack Row="true" Justify="Justify.SpaceBetween" Spacing="4">
                                <MudText Typo="Typo.h6">No 2023 Dates</MudText>
                                <MudSwitch @bind-Checked="_programBrowserVM.filterByMissingFutureDates"
                                           Color="Color.Tertiary"/>
                            </MudStack>
    
                        </MudStack>
                    </MudTabPanel>
    
                    @* <MudTabPanel Text="School"/> *@
                    @* *@
                    @* <MudTabPanel Text="Org"/> *@
    
                </MudTabs>
            </MudPaper>
        </MudItem>
    
</MudGrid>


<div class="d-flex flex-wrap mt-4" style="margin-bottom: 1em">
    <MudSwitch @bind-Checked="@_programBrowserVM.hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Checked="@_programBrowserVM.dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Checked="@_programBrowserVM.striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Checked="@_programBrowserVM.bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer/>
    <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-center">Selected: @_programBrowserVM.selected.name</MudText>
    </div>
</div>

<ProgramSideView sideViewVM="@_sideVM" summerProgram="_programBrowserVM.selected"
                 OnDeleteClickCallback="ArchiveSelected"/>

@code {

    private ProgramBrowserViewModel _programBrowserVM;
    private SideViewViewModel _sideVM = new();
    
    public string str { get; set; } = "on";

    private void OnClearFilterClicked()
    {
        _programBrowserVM.selectedFilterObj = new IndexedValue();
        _programBrowserVM.ClearSelectedFilter();
    }
    
    protected override Task OnInitializedAsync() {
        
        _programBrowserVM = _viewModelService.ProgramBrowserVM;
        _programBrowserVM.dbService ??= _dbService;
        _programBrowserVM.lookUpService ??= _lookupService;
        
        _programBrowserVM.OnValueChange += OnDataStateChanged;
        _programBrowserVM.OnDefaultListDisplay += OnDefaultListDisplayed;
        _programBrowserVM.OnProgramSelected += OnProgramSelection;
        
        _programBrowserVM.programsAll = 
            _dbService.SummerProgramsDb.dbItems.OrderBy(x => x.displayName).ToList();
        _programBrowserVM.SetProgramsToDisplay();
        
        return base.OnInitializedAsync();
    }

    private void OnRowClicked(SummerProgram summerProgram)
    {
        _programBrowserVM.selected = summerProgram;
        _sideVM.open = true;
    }

    private void OnProgramSelection()
    {
        _sideVM.open = true;
    }

    private void OnDefaultListDisplayed()
    {
        StateHasChanged();
        AddSnackBarUpdate("OnDefaultListDisplayed Event Received!", Severity.Warning);
    }
    
    private void OnDataStateChanged()
    {
        StateHasChanged();
        AddSnackBarUpdate("OnDataStateChanged Event Received!");
    }
    
    private bool FilterFunc1(SummerProgram program) {
        return FilterFunc(program, _programBrowserVM.searchString1);
    }

    private bool FilterFunc(SummerProgram program, string searchString) {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return program.name is not null 
               && program.name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }
    
    private void AddSnackBarUpdate(string text, Severity severity = Severity.Info)
    {
        _snackbar.Clear();
        _snackbar.Add(text, severity, config =>
        {
            config.CloseAfterNavigation = true;
            config.ShowCloseIcon = true;
            config.VisibleStateDuration = 2;
            config.Onclick = _ => Task.CompletedTask;
        });
    }

    public void Dispose() {
        _programBrowserVM.OnValueChange -= OnDataStateChanged;
        _programBrowserVM.OnDefaultListDisplay -= OnDefaultListDisplayed;
        _programBrowserVM.OnProgramSelected -= OnProgramSelection;
    }
    
    private async void ArchiveSelected()
    {
        var result = await ArchiveItem();
        
        if (result.Cancelled)
        {
            return;
        }
        _snackbar.Add($"Attempting to Archive: {_programBrowserVM.selected.displayName}");
        
        if (await _programBrowserVM.DeleteSelectedProgram())
        {
            _sideVM.open = false;
            _snackbar.Add($"Deleted: {_programBrowserVM.selected.displayName}");
            _programBrowserVM.selected = new();
            _viewModelService.ProgramBrowserVM.ReloadProgramsFromDb();
            return;
        }
        _snackbar.Add($"Failed to Archive: {_programBrowserVM.selected.displayName}");
    }

    private async Task<DialogResult> ArchiveItem()
    {
        var parameters = new DialogParameters();

        parameters.Add("ContentText", $"Do you really want to archive {_programBrowserVM.selected.TypeName()} {_programBrowserVM.selected.displayName}? This process is permanent.");
        parameters.Add("ButtonText", "Archive");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        return await _dialogService.Show<DeleteConfimationDialog>("Archive", parameters, options).Result;
    }

    private void OnClearTextSearchField()
    {
        _programBrowserVM.searchString1 = string.Empty;
    }
}