@page "/ProgramEditorView"
@using CollegeDataEditor.ViewModels
@using CollegeDataEditor.Services
@using CollegeDataEditor.Models
@using Color = MudBlazor.Color
@using Microsoft.AspNetCore.Authorization
@using CollegeDataEditor.Enums

@attribute [Authorize(Roles = "editor")]

@inject ViewModelService _viewModelService
@inject LookupService _lookupService
@inject DbService _dbService
@inject ISnackbar _snackbar
@inject IDialogService _dialogService
@inject NavigationManager _navigationManager


<MudGrid Class="mt-16">
@if (programEditorVM.selectedProgram is null)
{
    <MudItem xs="12">
        <div class="d-flex flex-column align-center">
            <MudPaper Class="pa-4 ma-2 d-flex">
                <MudText Class="my-4" Typo="Typo.h4" Color="Color.Primary">
                    No Program Selected
                </MudText>
            </MudPaper>
            <MudPaper Class="pa-4 ma-2">
                <MudStack Row="true">
                    <MudText Typo="Typo.h4" Color="Color.Primary">New Program?</MudText>
                    <MudSpacer/>
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Tertiary" 
                               OnClick="SetNewToEditor">
                        Create
                    </MudButton>
                </MudStack>
            </MudPaper>
        </div>
    </MudItem>
}
else
{
    <MudItem xs="8" Class="overflow-scroll">
        <BaseInfoEditView baseInfoObj="@programEditorVM.selectedProgram"
                          dbContext="@programEditorVM"/>
            
        <MudText Class="mt-12" Typo="Typo.h5" GutterBottom="true">
            Program Categories
        </MudText>
        <MudPaper Class="d-flex flex-column" Outlined="true">
            <MudList Clickable="true">
                    
                <EditableIndexValueListView idList="@programEditorVM.selectedProgram.programTypeIdList"
                                            listName="Program Type" valueType="IndexedValueType.ProgramType"
                                            lookupList="_lookupService.programTypes"
                                            itemIcons="@Icons.Material.Filled.Mode"
                                            dbContext="programEditorVM"
                                            @ref="@programTypeValueListView"/>
                    
                <MudDivider Class="my-2"/>
                    
                <EditableIndexValueListView idList="@programEditorVM.selectedProgram.subjectIdList"
                                            listName="Subject" valueType="IndexedValueType.Subject"
                                            lookupList="_lookupService.subjects"
                                            itemIcons="@Icons.Material.Filled.Subject"
                                            dbContext="programEditorVM"
                                            @ref="subjectValueListView"/>
                <MudDivider Class="my-2"/>

                <EditableIndexValueListView idList="@programEditorVM.selectedProgram.topicIdList"
                                            listName="Topic" valueType="IndexedValueType.Topic"
                                            lookupList="_lookupService.topics"
                                            itemIcons="@Icons.Material.Filled.Topic"
                                            dbContext="programEditorVM"
                                            @ref="topicValueListView"/>
            </MudList>
        </MudPaper>
            
        <MudText Class="mt-12" Typo="Typo.h5" GutterBottom="true">
            Program Elements
        </MudText>
            
        <MudPaper Class="d-flex flex-column" Outlined="true">
            <MudList Clickable="true">
                <EditableBaseInfoListView @bind-idList="@programEditorVM.selectedProgram.orgIdList"
                                          listName="Organizations"
                                          lookupList="_lookupService.orgs"
                                          itemIcons="@Icons.Material.Filled.School"
                                          dbContext="programEditorVM"/>
                    
                <MudDivider Class="my-2"/>
                    
                <EditableApplicationListView listName="Applications"
                                             @bind-idList="@programEditorVM.selectedProgram.applicationIdList"
                                             lookupList="_lookupService.applications"
                                             db="@programEditorVM.dbService.ApplicationsDb"
                                             dbContext="programEditorVM"
                                             itemIcons="@Icons.Material.Filled.Checklist"
                                             ItemClicked="OnApplicationClicked"/>
                    
                <MudDivider Class="my-2"/>
                    
                <EditableSessionListView listName="Session"
                                         @bind-idList="@programEditorVM.selectedProgram.sessionIdList"
                                         lookupList="_lookupService.sessions"
                                         db="@programEditorVM.dbService.SessionsDb"
                                         dbContext="programEditorVM"
                                         itemIcons="@Icons.Material.Filled.CalendarViewWeek"
                                         ItemClicked="OnSessionClicked"/>
                    
                <MudDivider Class="my-2"/>
                                        
                <EditableStudentInfoListView listName="Student Info"
                                             @bind-idList="@programEditorVM.selectedProgram.studentInfoIdList"
                                             lookupList="_lookupService.studentInfoList"
                                             db="@programEditorVM.dbService.StudentInfoDb"
                                             dbContext="programEditorVM"
                                             itemIcons="@Icons.Material.Filled.EditLocation"
                                             ItemClicked="OnStudentInfoClicked"/>
                    
            </MudList>
        </MudPaper>
    </MudItem>
        
    <MudItem xs="4" Class="sticky">
        <MudText Typo="Typo.h5" GutterBottom="true">Options</MudText>
        <MudPaper Class="d-flex flex-column" Outlined="true">
            <MudList Clickable="true">
                <MudListItem>
                    <MudButton FullWidth="true" Color="Color.Warning"
                               StartIcon="@Icons.Material.Filled.NewLabel"
                               OnClick="SetNewToEditor">
                        New Program
                    </MudButton>
                    @* <div class="d-flex"> *@
                    @*     <MudText>Save To Database</MudText> *@
                    @*     <MudButton>Submit</MudButton> *@
                    @*     $1$ <MudText Inline="true" Class="ml-auto"> #1# *@
                    @*     $1$      #1# *@
                    @*     $1$ </MudText> #1# *@
                    @* </div> *@
                </MudListItem>
                    
                <MudListItem>
                    <MudButton FullWidth="true" Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.NewLabel"
                               OnClick="OnSaveEditsToDbPressed">
                        Save To Database
                    </MudButton>
                    @* <div class="d-flex"> *@
                    @*     <MudText>Save To Database</MudText> *@
                    @*     <MudButton>Submit</MudButton> *@
                    @*     $1$ <MudText Inline="true" Class="ml-auto"> #1# *@
                    @*     $1$      #1# *@
                    @*     $1$ </MudText> #1# *@
                    @* </div> *@
                </MudListItem>
                <MudListItem>
                    <MudButton FullWidth="true" Color="Color.Secondary"
                               StartIcon="@Icons.Material.Filled.Archive"
                               OnClick="ArchiveSelected">
                        Archive Program
                    </MudButton>
                    @* <div class="d-flex"> *@
                    @*     <MudText>Save To Database</MudText> *@
                    @*     <MudButton>Submit</MudButton> *@
                    @*     $1$ <MudText Inline="true" Class="ml-auto"> #1# *@
                    @*     $1$      #1# *@
                    @*     $1$ </MudText> #1# *@
                    @* </div> *@
                </MudListItem>
                    
                @* <MudListItem Icon="@Icons.Material.Filled.AirplanemodeActive"> *@
                @*     <div class="d-flex"> *@
                @*         <MudText>Model Airplane</MudText> *@
                @*         <MudText Class="ml-auto">$20</MudText> *@
                @*     </div> *@
                @* </MudListItem> *@
                @* <MudListItem Icon="@Icons.Material.Filled.Create"> *@
                @*     <div class="d-flex"> *@
                @*         <MudText>Plastic Glue</MudText> *@
                @*         <MudText Class="ml-auto">$12</MudText> *@
                @*     </div> *@
                @* </MudListItem> *@
                @* <MudListItem Icon="@Icons.Material.Filled.ColorLens"> *@
                @*     <div class="d-flex"> *@
                @*         <MudText>Color set - Modern planes</MudText> *@
                @*         <MudText Class="ml-auto">$16</MudText> *@
                @*     </div> *@
                @* </MudListItem> *@
            </MudList>
            @* <div class="mt-auto"> *@
            @*     <MudDivider /> *@
            @*     <div class="d-flex pa-4"> *@
            @*         <MudText>Total:</MudText> *@
            @*         <MudText Class="ml-auto"><b>$53</b></MudText> *@
            @*     </div> *@
            @* </div> *@
        </MudPaper>
            
        <MudText Class="mt-12" Typo="Typo.h5" GutterBottom="true">
            Update Reminder
        </MudText>
        <MudPaper Class="d-flex flex-column" Outlined="true">
                
            <MudList Clickable="true">
                <MudListItem>
                    <MudCheckBox @bind-Checked="@reminderChecked"
                                 Label="Reminder Set"/>
                </MudListItem>
                <MudListItem>
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" 
                                   Label="Snooze Until (yyyy-MM-dd)"
                                   @bind-Date="@reminderDate"
                                   DateFormat="yyyy-MM-dd"
                                   AnchorOrigin="Origin.BottomLeft"/>
                </MudListItem>
            </MudList>
                
            @* <div class="mt-auto"> *@
            @*     <MudDivider /> *@
            @*     <div class="d-flex pa-4"> *@
            @*         <MudText>Total:</MudText> *@
            @*         <MudText Class="ml-auto"><b>$53</b></MudText> *@
            @*     </div> *@
            @* </div> *@
        </MudPaper>
    </MudItem>
}
</MudGrid>

@if (programEditorVM.application is not null)
{
    <ApplicationSideView sideViewVM="@programEditorVM.ApplicationSideView" 
                         application="@programEditorVM.application"
                         dbContext="@programEditorVM"
                         applicationChanged="StateHasChanged"/>
}

@if (programEditorVM.session is not null)
{
    <SessionSideView sideViewVM="@programEditorVM.SessionSideView" 
                     session="@programEditorVM.session"
                     dbContext="@programEditorVM"
                     sessionChanged="StateHasChanged"/>
}

@if (programEditorVM.studentInfo is not null)
{
    <StudentInfoSideView sideViewVM="@programEditorVM.StudentInfoSideView" 
                         StudentInfo="@programEditorVM.studentInfo"
                         dbContext="@programEditorVM"
                         StudentInfoChanged="StateHasChanged"/>
}

@code {

    private ProgramEditorViewModel programEditorVM { get; set; }

    private EditableIndexValueListView programTypeValueListView;
    private EditableIndexValueListView subjectValueListView;
    private EditableIndexValueListView topicValueListView;
    private MudDatePicker _snoozeDatePicker;
    
    private bool reminderChecked
    {
        get => programEditorVM.selectedProgram.hasReminderSet;
        set
        {
            programEditorVM.selectedProgram.hasReminderSet = value;
            OnDateChanged();
        } 
    }

    private DateTime? reminderDate
    {
        get => programEditorVM.selectedProgram.sleepUntil;
        set
        {
            programEditorVM.selectedProgram.sleepUntil = value;
            OnDateChanged();
        } 
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        programEditorVM = _viewModelService.ProgramEditorViewModel;
        programEditorVM.dbService = _dbService;
        programEditorVM.OnSuccessfulSaveToDb += OnSaveToDbSuccess;
        programEditorVM.OnUnsuccessfulSaveToDb += OnSaveToDbFailed;
    }

    private void OnSaveToDbFailed(string s)
    {
        AddSnackBarUpdate($"{s} DB", Severity.Error, Icons.Material.Filled.Error);
    }

    private void OnSaveToDbSuccess(string s)
    {
        AddSnackBarUpdate($"{s} DB", Severity.Success, Icons.Material.Filled.Save);
    }

    private void SetNewToEditor()
    {
        programEditorVM.selectedProgram = new();

    // programTypeValueListView.idList = programEditorVM.selectedProgram.programTypeIdList;
    // subjectValueListView.idList = programEditorVM.selectedProgram.subjectIdList;
    // topicValueListView.idList = programEditorVM.selectedProgram.topicIdList;
        
    // programTypeValueListView.RefreshDisplayList();
    // subjectValueListView.RefreshDisplayList();
    // topicValueListView.RefreshDisplayList();
        
    // _viewModelService.ProgramBrowserVM.ReloadProgramsFromDb();
    }

    private async Task OnSaveEditsToDbPressed()
    {
        await programEditorVM.SubmitEditsToDbAsync();
    }
    
    private void AddSnackBarUpdate(string text, Severity severity = Severity.Info, string icon = "")
    {
        _snackbar.Clear();
        _snackbar.Add(text, severity, config =>
        {
            if(!string.IsNullOrWhiteSpace(icon))
                config.Icon = icon;
            
            config.CloseAfterNavigation = true;
            config.ShowCloseIcon = true;
            config.VisibleStateDuration = 3;
            config.Onclick = _ => Task.CompletedTask;
        });
    }
    
    private void OnApplicationClicked(Application obj)
    {
        programEditorVM.application = obj;
        programEditorVM.ApplicationSideView.DisplaySideView();
    }

    private void OnSessionClicked(Session obj)
    {
        programEditorVM.session = obj;
        programEditorVM.SessionSideView.DisplaySideView();
    }

    private void OnStudentInfoClicked(StudentInfo obj)
    {
        programEditorVM.studentInfo = obj;
        programEditorVM.StudentInfoSideView.DisplaySideView();
    }

    private async void OnReminderChanged()
    {
        await programEditorVM.SubmitEditsToDbAsync();
    }

    private async void OnDateChanged()
    {
    // _snoozeDatePicker.DateChanged
    // programEditorVM.selectedProgram.sleepUntil = _snoozeDatePicker.Date.
    //     GetValueOrDefault(DateTime.Now);
        
        await programEditorVM.SubmitEditsToDbAsync();
    // StateHasChanged();
    }

    private async void ArchiveSelected()
    {
        var result = await ArchiveItem();
        
        if (result.Cancelled)
        {
            return;
        }
        _snackbar.Add($"Attempting to Archive: {programEditorVM.selectedProgram.displayName}");
        
        if (await programEditorVM.DeleteSelectedProgram())
        {
            _snackbar.Add($"Deleted: {programEditorVM.selectedProgram.displayName}");
            programEditorVM.selectedProgram = new();
            _viewModelService.ProgramBrowserVM.ReloadProgramsFromDb();
            _navigationManager.NavigateTo("ProgramBrowser");
            return;
        }
        _snackbar.Add($"Failed to Archive: {programEditorVM.selectedProgram.displayName}");
    }

    private async Task<DialogResult> ArchiveItem()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", $"Do you really want to archive {programEditorVM.selectedProgram.TypeName()} {programEditorVM.selectedProgram.displayName}? This process is permanent.");
        parameters.Add("ButtonText", "Archive");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        return await _dialogService.Show<DeleteConfimationDialog>("Archive", parameters, options).Result;
    }
    

}